version: 2

node-core-base: &node-core-base
  docker:
    - image: node:8
  working_directory: ~/signalfx-nodejs-tracing
  resource_class: small
  steps:
    - checkout
    - &yarn-versions
      run:
        name: Versions
        command: yarn versions
    - &restore-yarn-cache
      restore_cache:
        key: yarn-{{ .Environment.CIRCLE_JOB }}-{{ checksum "package.json" }}
    - &yarn-install
      run:
        name: Install dependencies
        command: yarn install --ignore-engines
        environment:
          DD_NATIVE_METRICS: "false"
    - &save-yarn-cache
      save_cache:
        key: yarn-{{ .Environment.CIRCLE_JOB }}-{{ checksum "package.json" }}
        paths:
          - ./node_modules
          - ./yarn.lock
    - &yarn-rebuild
      run:
        name: Compile native code
        command: yarn rebuild
    - &yarn-test-core
      run:
        name: Unit tests
        command: yarn test:core
    - &run-benchmark
      run:
        name: Benchmark
        command: yarn bench
    - &run-async-tests
      run:
        name: Async scope tests
        command: yarn test:async

node-plugin-base: &node-plugin-base
  docker:
    - image: node:8
  working_directory: ~/signalfx-nodejs-tracing
  resource_class: small
  steps:
    - checkout
    - run:
        name: Versions
        command: yarn versions
    - &restore-yarn-cache
      restore_cache:
        key: yarn-{{ .Environment.CIRCLE_JOB }}-{{ checksum "package.json" }}
    - run:
        name: Install dependencies
        command: yarn install
        environment:
          DD_NATIVE_METRICS: "false"
    - &save-yarn-cache
      save_cache:
        key: yarn-{{ .Environment.CIRCLE_JOB }}-{{ checksum "package.json" }}
        paths:
          - ./node_modules
          - ./yarn.lock
    - run:
        name: Unit tests
        command: yarn test:plugins
    - run:
        name: Memory leak tests
        command: yarn leak:plugins

jobs:
  # Linting

  lint:
    docker:
      - image: node
    working_directory: ~/signalfx-nodejs-tracing
    resource_class: small
    steps:
      - checkout
      - run:
          name: Versions
          command: yarn versions
      - *restore-yarn-cache
      - run:
          name: Install dependencies
          command: yarn install
      - *save-yarn-cache
      - run:
          name: Lint
          command: yarn lint

  # Core tests

  node-core-4:
    <<: *node-core-base
    docker:
      - image: node:4
    steps:
      - checkout
      - *yarn-versions
      - *restore-yarn-cache
      - *yarn-install
      - *save-yarn-cache
      - *yarn-rebuild
      - *yarn-test-core
      - *run-benchmark

  node-core-6:
    <<: *node-core-base
    docker:
      - image: node:6
    steps:
      - checkout
      - *yarn-versions
      - *restore-yarn-cache
      - *yarn-install
      - *save-yarn-cache
      - *yarn-rebuild
      - *yarn-test-core
      - *run-benchmark

  node-core-8:
    <<: *node-core-base
    docker:
      - image: node:8

  node-core-10:
    <<: *node-core-base
    docker:
      - image: node:10

  node-core-12:
    <<: *node-core-base
    docker:
      - image: node:12

  node-core-latest:
    <<: *node-core-base
    docker:
      - image: node

  node-leaks:
    docker:
      - image: node:8
    working_directory: ~/signalfx-nodejs-tracing
    resource_class: small
    steps:
      - checkout
      - run:
          name: Versions
          command: yarn versions
      - *restore-yarn-cache
      - run:
          name: Install dependencies
          command: yarn install
      - *save-yarn-cache
      - run:
          name: Memory leak tests
          command: yarn leak:core

  # Plugin tests
  node-adonis:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - PLUGINS=adonis

  node-amqplib:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - SERVICES=rabbitmq
          - PLUGINS=amqplib
      - image: rabbitmq:3.6-alpine

  node-amqp10:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - SERVICES=qpid
          - PLUGINS=amqp10
      - image: scholzj/qpid-cpp:1.38.0
        command: -p 5673
        environment:
          - QPIDD_ADMIN_USERNAME=admin
          - QPIDD_ADMIN_PASSWORD=admin

  node-bluebird:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - PLUGINS=bluebird

  node-bunyan:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - PLUGINS=bunyan

  node-cassandra:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - SERVICES=cassandra
          - PLUGINS=cassandra-driver
      - image: spotify/cassandra
        environment:
          - CASSANDRA_TOKEN=-9223372036854775808

  node-dns:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - PLUGINS=dns

  node-elasticsearch:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - SERVICES=elasticsearch
          - PLUGINS=elasticsearch
      - image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.2.4
        environment:
          - discovery.type=single-node
          - "ES_JAVA_OPTS=-Xms64m -Xmx64m"

  node-express:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - PLUGINS=express

  node-generic-pool:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - PLUGINS=generic-pool

  node-8-graphql:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - PLUGINS=graphql

  node-graphql:
    <<: *node-plugin-base
    docker:
      - image: node:10
        environment:
          - PLUGINS=graphql

  node-hapi:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - PLUGINS=hapi

  node-http:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - PLUGINS=http

  node-koa:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - PLUGINS=koa

  node-knex:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - PLUGINS=knex
  
  node-memcached:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - SERVICES=memcached
          - PLUGINS=memcached
      - image: memcached:1.5-alpine

  node-mysql:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - SERVICES=mysql
          - PLUGINS=mysql|mysql2
      - image: mysql:5.7
        environment:
          - MYSQL_ALLOW_EMPTY_PASSWORD=yes
          - MYSQL_DATABASE=db

  node-mongodb-core:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - SERVICES=mongo
          - PLUGINS=mongodb-core
      - image: mongo
        command: >
          bash -c 'echo "rs.initiate({_id: \"replicaset\", members: [{_id: 0, host: \"localhost:27017\"}]})" > ~/rs.js &&
                   mongod --bind_ip 0.0.0.0 --replSet replicaset &
                   sleep 3 &&
                   mongo ~/rs.js &&
                   wait'

  node-net:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - PLUGINS=net

  node-nest:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - PLUGINS=nest

  node-pino:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - PLUGINS=pino

  node-postgres:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - SERVICES=postgres
          - PLUGINS=pg
          - PG_TEST_NATIVE=true
      - image: postgres:9.5
        environment:
          - POSTGRES_HOST_AUTH_METHOD=trust

  node-q:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - PLUGINS=q

  node-redis:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - SERVICES=redis
          - PLUGINS=redis|ioredis
      - image: redis:4.0-alpine

  node-restify:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - PLUGINS=restify

  node-router:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - PLUGINS=router

  node-sails:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - PLUGINS=sails

  node-socket-io:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - PLUGINS=socket.io

  node-when:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - PLUGINS=when

  node-winston:
    <<: *node-plugin-base
    docker:
      - image: node:8
        environment:
          - PLUGINS=winston

  typescript:
    docker:
      - image: node:8
    working_directory: ~/signalfx-nodejs-tracing
    resource_class: small
    steps:
      - checkout
      - *yarn-versions
      - *restore-yarn-cache
      - *yarn-install
      - *save-yarn-cache
      - run:
          name: Test API documentation
          command: yarn type:test
      - run:
          name: Build API documentation
          command: yarn type:doc
      - store_artifacts:
          path: ./docs/out

  prebuild-linux-x64:
    docker:
      - image: node:10
    working_directory: ~/dd-trace-js
    resource_class: small
    environment:
      - ARCH=x64
    steps:
      - checkout
      - *yarn-versions
      - *restore-yarn-cache
      - *yarn-install
      - *save-yarn-cache
      - &yarn-prebuild
        run:
          name: Compile prebuilt binaries
          command: yarn prebuild
      - store_artifacts:
          path: ./addons-linux-x64.tgz
      - save_cache:
          key: '{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}'
          paths:
            - ./prebuilds

  prebuild-linux-x32:
    docker:
      - image: node:10
    working_directory: ~/dd-trace-js
    resource_class: small
    environment:
      - ARCH=x32
    steps:
      - run:
          name: Install job dependencies
          command: apt-get update && apt-get install -y g++-multilib
      - checkout
      - *yarn-versions
      - *restore-yarn-cache
      - *yarn-install
      - *save-yarn-cache
      - *yarn-prebuild
      - store_artifacts:
          path: ./addons-linux-x32.tgz

  alpine:
    docker:
      - image: node:10-alpine
    working_directory: ~/dd-trace-js
    resource_class: small
    steps:
      - run:
          name: Install job dependencies
          command: apk add g++ git make python
      - checkout
      - *yarn-versions
      - *restore-yarn-cache
      - *yarn-install
      - *save-yarn-cache
      - *yarn-rebuild
      - *yarn-test-core

  alpine-prebuilt:
    docker:
      - image: node:10-alpine
    working_directory: ~/dd-trace-js
    resource_class: small
    steps:
      - run:
          name: Install job dependencies
          command: apk add git
      - checkout
      - *yarn-versions
      - *restore-yarn-cache
      - *yarn-install
      - *save-yarn-cache
      - restore_cache:
          key: prebuild-linux-x64-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Unit tests
          command: yarn test:core

workflows:
  version: 2
  build:
    jobs:
      - lint
      - typescript
      - node-leaks
      - node-core-4
      - node-core-6
      - node-core-8
      - node-core-10
      - node-core-12
      - node-core-latest
      - node-adonis
      - node-amqplib
      - node-amqp10
      - node-bluebird
      - node-bunyan
      - node-cassandra
      - node-dns
      - node-elasticsearch
      - node-express
      - node-generic-pool
      - node-8-graphql
      - node-graphql
      - node-hapi
      - node-http
      - node-knex
      - node-koa
      - node-memcached
      - node-mongodb-core
      - node-mysql
      - node-net
      - node-nest
      - node-pino
      - node-postgres
      - node-q
      - node-redis
      - node-restify
      - node-sails
      - node-socket-io
      - node-when
      - node-winston
      - prebuild-linux-x64:
          filters:
            branches:
              only:
                - master
                - /v\d+\.\d+\.\d+([-a-z]+\.\d+)?/
      - prebuild-linux-x32:
          filters:
            branches:
              only:
                - master
                - /v\d+\.\d+\.\d+([-a-z]+\.\d+)?/
      - alpine
      - alpine-prebuilt:
          requires:
            - prebuild-linux-x64
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - node-core-4
      - node-core-6
      - node-core-8
      - node-core-10
      - node-core-12
      - node-core-latest
      - node-adonis
      - node-amqplib
      - node-amqp10
      - node-bluebird
      - node-bunyan
      - node-cassandra
      - node-dns
      - node-elasticsearch
      - node-express
      - node-generic-pool
      - node-graphql
      - node-hapi
      - node-http
      - node-knex
      - node-koa
      - node-memcached
      - node-mongodb-core
      - node-mysql
      - node-net
      - node-pino
      - node-postgres
      - node-q
      - node-redis
      - node-restify
      - node-sails
      - node-socket-io
      - node-when
      - node-winston
